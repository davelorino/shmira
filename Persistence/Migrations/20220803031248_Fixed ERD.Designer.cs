// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220803031248_Fixed ERD")]
    partial class FixedERD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("AssigneeIssue", b =>
                {
                    b.Property<Guid>("assigneesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("issuesId")
                        .HasColumnType("TEXT");

                    b.HasKey("assigneesId", "issuesId");

                    b.HasIndex("issuesId");

                    b.ToTable("AssigneeIssue");
                });

            modelBuilder.Entity("AssigneeProject", b =>
                {
                    b.Property<Guid>("assigneesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("projectsId")
                        .HasColumnType("TEXT");

                    b.HasKey("assigneesId", "projectsId");

                    b.HasIndex("projectsId");

                    b.ToTable("AssigneeProject");
                });

            modelBuilder.Entity("Domain.Assignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("employment_contract_type")
                        .HasColumnType("TEXT");

                    b.Property<string>("first_name")
                        .HasColumnType("TEXT");

                    b.Property<string>("id_of_direct_report")
                        .HasColumnType("TEXT");

                    b.Property<string>("second_name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Assignees");
                });

            modelBuilder.Entity("Domain.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("currently_estimated_duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("description_text")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("original_estimated_duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("project_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("reporter_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("reviewer_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("sprint_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<string>("team_id")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("time_logged")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("description_text")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("owner_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<string>("team_id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.Sprint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("closing_summary")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date_end")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date_start")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("description_text")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("priority")
                        .HasColumnType("TEXT");

                    b.Property<string>("project_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("AssigneeIssue", b =>
                {
                    b.HasOne("Domain.Assignee", null)
                        .WithMany()
                        .HasForeignKey("assigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Issue", null)
                        .WithMany()
                        .HasForeignKey("issuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssigneeProject", b =>
                {
                    b.HasOne("Domain.Assignee", null)
                        .WithMany()
                        .HasForeignKey("assigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Issue", b =>
                {
                    b.HasOne("Domain.Sprint", null)
                        .WithMany("issues")
                        .HasForeignKey("SprintId");
                });

            modelBuilder.Entity("Domain.Sprint", b =>
                {
                    b.HasOne("Domain.Project", null)
                        .WithMany("sprints")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Navigation("sprints");
                });

            modelBuilder.Entity("Domain.Sprint", b =>
                {
                    b.Navigation("issues");
                });
#pragma warning restore 612, 618
        }
    }
}
